using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Linq;
using Newtonsoft.Json; // instalowanie Newtonsoft.Json w pakiecie Nuget

using DWORD = System.Int32;

namespace Ćwiczenia2
{
    /// <summary>
    /// Klasa grupa
    /// zawierająca listę studentów
    /// </summary>
    class Grupa : IWritable
    {
        // List studentów
        private List<Student> students;

        // Nazwa grupy
        private string groupName;

        /// <summary>
        /// Główny, jedyny dostępny konstruktor
        /// </summary>
        /// <param name="groupName">Nazwa grupy</param>
        public Grupa(string groupName)
        {
            this.groupName = groupName;
            this.students = new List<Student>();
        }

        /// <summary>
        /// Metoda do dodawania studenta do listy w grupie
        /// </summary>
        /// <param name="student">Student do dodania</param>
        /// <returns>Zwraca -1 jeśli podany student już istnieje w grupie, w innych przypadkach zwraca 0</returns>
        public DWORD AddStudent(Student student)
        {
            if (this.students.Contains(student))
                return -1;
            else
            {
                this.students.Add(student);
                return 0;
            }
        }

        /// <summary>
        /// Metoda do agregacji do listy studentów
        /// </summary>
        /// <param name="students">Lista studentów do dodania</param>
        /// <returns>Zwraca -1 jeśli chociaż jeden student jest duplikowanym, zwraca -2 jeśli wszyscy, zero jeśli żaden </returns>
        public DWORD AddStudents(List<Student> students)
        {
            int howmany = 0;
            foreach(Student student in students)
            {
                if(this.students.Contains(student))
                {
                    howmany++;
                }
                else
                {
                    this.students.Add(student);
                }

                
            }
            if (howmany > 0 && howmany < students.Count)
                return -1;

            if (howmany.Equals(students.Count))
                return -2;

            return 0;
        }

        /// <summary>
        /// Lista arbitralnej długości studentów do agregacji
        /// </summary>
        /// <param name="students">Lista studentów do dodania</param>
        /// /// <returns>Zwraca -1 jeśli chociaż jeden student jest duplikowanym, zwraca -2 jeśli wszyscy, zero jeśli żaden </returns>
        public DWORD AddStudents(params Student[] students)
        {
            int howMany = 0;
            foreach (Student student in students)
            {
                if (this.students.Contains(student))
                {
                    howMany++;
                }
                else
                {
                    this.students.Add(student);
                }


            }
            if (howMany > 0 && howMany < students.Count())
                return -1;

            if (howMany.Equals(students.Count()))
                return -2;

            return 0;
        }

        /// <summary>
        /// Usunięcie studenta przez index w liście
        /// </summary>
        /// <param name="index">Indeks z którego student jest usuwany</param>
        public void DeleteStudent(int index)
        {
            this.students.RemoveAt(index);
        }

        /// <summary>
        /// Usunięcie studenta przez porównanie każdego indexu studenta z indexem studenta
        /// podanego przez parametr
        /// </summary>
        /// <param name="student">Student do usunięcie</param>
        public void DeleteStudent(Student student)
        {
            this.students.Remove(students.Single(s => s.Index == student.Index));
        }

        /// <summary>
        /// Zapisywanie do pliku w formacie xml.
        /// </summary>
        /// <param name="outputFileName">Nazwa pliku, w którym będą zapisane dane</param>
        public void WriteToXmlFile(string outputFileName)
        {
            outputFileName += ".xml";
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            XmlWriter writer = XmlWriter.Create(@outputFileName, settings);
            writer.WriteStartDocument();
            writer.WriteStartElement("grupa");
            writer.WriteAttributeString("createdAt", DateTime.Now.ToString("MM/dd/yyyy").Replace("/", "."));
            writer.WriteAttributeString("author", System.Security.Principal.WindowsIdentity.GetCurrent().Name);
            writer.WriteComment("This file is generated by the program");
            writer.WriteStartElement("studenci");
            foreach(Student student in students)
            {
                WriteToXmlFile(writer, student);
            }
            writer.WriteEndElement();
            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            writer.Close();
        }

        /// <summary>
        /// Prywatna metoda do formatowania zapisywanego studenta
        /// </summary>
        /// <param name="writer">Xml writer wykorzystywany przy formatowanym zapise do pliku</param>
        /// <param name="student">Student do zapisu</param>
        private void WriteToXmlFile(in XmlWriter writer, in Student student)
        {
            writer.WriteStartElement("student");
            writer.WriteAttributeString("indexNumber", student.Index);
            writer.WriteElementString("fname", student.Name);
            writer.WriteElementString("lname", student.LName);
            writer.WriteElementString("birthdate", student.DateOfBirth);
            writer.WriteElementString("email", student.Email);
            writer.WriteElementString("mothersName", student.MName);
            writer.WriteElementString("fathersName", student.FName);
            writer.WriteStartElement("studies");
            writer.WriteElementString("name", student.Type);
            writer.WriteElementString("mode", student.Type1);
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        /// <summary>
        /// Zapisywanie do pliku w formacie json.
        /// </summary>
        /// <param name="outputFileName"></param>
        public void WriteToJsonFile(string outputFileName)
        {
            outputFileName += ".json";
            StreamWriter streamWriter = new StreamWriter(@outputFileName);
            JsonWriter writer = new JsonTextWriter(streamWriter);
            writer.Formatting = Newtonsoft.Json.Formatting.Indented;
            writer.WriteStartObject();
            writer.WritePropertyName("grupa: " + groupName);
            writer.WriteStartObject();
            writer.WritePropertyName("createdAt");
            writer.WriteValue(DateTime.Now.ToString("MM/dd/yyyy").Replace("/", "."));
            writer.WritePropertyName("author");
            writer.WriteValue(System.Security.Principal.WindowsIdentity.GetCurrent().Name);
            writer.WritePropertyName("studenci");
            writer.WriteStartArray();
            foreach(Student student in students)
            {
                WriteToJsonFile(writer, student);
            }
            writer.WriteEnd();
            writer.WriteEndObject();
            writer.Close();
        }

        /// <summary>
        /// Prywatna metoda do formatowania zapisywanego studenta
        /// </summary>
        /// <param name="writer">Json writer wykorzystywany przy formatowanym zapise do pliku</param>
        /// <param name="student">Student do zapisu</param>
        private void WriteToJsonFile(in JsonWriter writer, in Student student)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("index");
            writer.WriteValue(student.Index);
            writer.WritePropertyName("fname");
            writer.WriteValue(student.Name);
            writer.WritePropertyName("lname");
            writer.WriteValue(student.LName);
            writer.WritePropertyName("birthdate");
            writer.WriteValue(student.DateOfBirth);
            writer.WritePropertyName("email");
            writer.WriteValue(student.Email);
            writer.WritePropertyName("mothersName");
            writer.WriteValue(student.MName);
            writer.WritePropertyName("fathersName");
            writer.WriteValue(student.FName);
            writer.WritePropertyName("studies");
            writer.WriteStartObject();
            writer.WritePropertyName("name");
            writer.WriteValue(student.Type);
            writer.WritePropertyName("mode");
            writer.WriteValue(student.Type1);
            writer.WriteEndObject();
            writer.WriteEndObject();
        }
    }
}
